# -*- coding: utf-8 -*-
"""Customer churn modelling with ANN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CyWzuYhV6q94Hgl8JBiqQhFLdvxZhHlZ
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

# Importing the dataset
dataset = pd.read_csv('/content/gdrive/MyDrive/customer churn modelling.csv')
dataset.head()

# Understanding the dataset and the number of unique values in each column
print(dataset.nunique())

# Check the number of missing values in each column
dataset.isnull().sum()

sns.heatmap(dataset.corr())

sns.countplot(x='Geography', data=dataset, palette = 'Set3')

sns.countplot(x='IsActiveMember', data=dataset, palette = 'Set2')

sns.countplot(x='HasCrCard', data=dataset, palette = 'Set1')

sns.countplot(x='NumOfProducts', data=dataset, palette = 'Set3')

# let's plot pair plot to visualise the attributes all at once
sns.pairplot(data=dataset, hue = 'Exited')

X = dataset.iloc[:, 3:13].values
Y = dataset.iloc[:, 13].values

# Handling of missing values
from sklearn.impute import SimpleImputer 
imputer = SimpleImputer(missing_values=np.nan, strategy= 'mean')
imputer = imputer.fit(X[:,3:10])
X[:,3:10] = imputer.transform(X[:,3:10])

#One-hot encoding categorical attribute 'Geography' and label encoding 'Gender' 
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
labelencoder = LabelEncoder()
X[:, 2] = labelencoder.fit_transform(X[:, 2])
from sklearn.compose import ColumnTransformer
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [1])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
X = X[:, 1:]
print(X)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 0)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Let's make the ANN!

# Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

# Initialising the ANN
classifier = Sequential()

# Adding the input layer and the first hidden layer
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu', input_dim = 11))

# Adding the second hidden layer
classifier.add(Dense(units = 6, kernel_initializer = 'uniform', activation = 'relu'))

# Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))

# Compiling the ANN
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Fitting the ANN to the Training set
classifier.fit(X_train, Y_train, batch_size = 10, epochs = 100)

# Making the predictions and evaluating the model

# Predicting the Test and Train set results
Y_pred = classifier.predict(X_test)
Y_pred = (Y_pred > 0.5)
Y_train_pred = classifier.predict(X_train)
Y_train_pred = (Y_train_pred > 0.5)

#Making the confusion matrix for test data
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Y_test, Y_pred)
print(cm)

# Visualizing the confusion matrix
import seaborn as sns
sns.heatmap(cm, annot=True)

#Performance metrics for both the training and testing data

# Accuracy 
from sklearn.metrics import accuracy_score
training_data_accuracy = accuracy_score(Y_train_pred, Y_train)
print('Accuracy on Training data is %f' % training_data_accuracy)
accuracy = accuracy_score(Y_test, Y_pred)
print('Accuracy on Test data is %f' % accuracy)

#Precision
from sklearn.metrics import precision_score
training_data_precision = precision_score(Y_train_pred, Y_train)
print('Precision on Training data is %f' % training_data_precision)
precision = precision_score(Y_test, Y_pred)
print('Precision on Test data is %f' % precision)
 
# Recall
from sklearn.metrics import recall_score
training_data_recall = recall_score(Y_train_pred, Y_train)
print('Recall on Training data is %f' % training_data_recall)
recall = recall_score(Y_test, Y_pred)
print('Recall on Test data is %f' % recall)